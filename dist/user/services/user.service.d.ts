import { HashService } from 'src/hash/hash.service';
import { UserRoleService } from 'src/user/services/user-role.service';
import { FindManyOptions, FindOneOptions, Repository } from 'typeorm';
import { CreateUserDto } from '../dto/create-user.dto';
import { PublicUserDto } from '../dto/public-user.dto';
import { User } from '../entities/user.entity';
export declare class UserService {
    private repo;
    private userRoleService;
    private hashService;
    private readonly logger;
    constructor(repo: Repository<User>, userRoleService: UserRoleService, hashService: HashService);
    private _generateRandomAlphanumeric;
    private _isCodeUnique;
    private _generateUniqueCode;
    generateRandomUsername(): string;
    find(query: FindManyOptions<User>): Promise<User[]>;
    findOne(query: FindOneOptions<User>): Promise<User>;
    findAll(): Promise<User[]>;
    Public_findAll(): Promise<PublicUserDto[]>;
    Public_findOneByUsername(username: string, options?: FindOneOptions<User>): Promise<User>;
    findOneById(id: string, options?: FindOneOptions<User>): Promise<User>;
    findOneByEmail(email: string, options?: FindOneOptions<User>): Promise<User>;
    findOneByUsername(username: string, options?: FindOneOptions<User>): Promise<User>;
    forgotPassword(email: string): Promise<User>;
    findEmailVerificationTokenUsername(username: string): Promise<User>;
    findUserByEmailVerificationToken(emailVerificationToken: string): Promise<User>;
    confirmEmail(token: string): Promise<User>;
    findOneByIdentity(identity: string, options?: FindOneOptions<User>): Promise<User>;
    findOneByIdentity_withPassword(identity: string, options?: FindOneOptions<User>): Promise<User>;
    checkUsernameAvailability(username: string): Promise<boolean>;
    save(user: User): Promise<User>;
    create(newUserDto: CreateUserDto, options?: FindOneOptions<User>): Promise<User>;
    update(username: string, updateUserDto: Partial<User>, options?: FindOneOptions<User>): Promise<User>;
    updateLastLogin(id: string): Promise<User>;
    toggleOnlineStatus(id: string, override?: boolean): Promise<User>;
    getOnlineAdminCount(): Promise<number>;
    getOfflineAdminCount(): Promise<number>;
    getOnlineUserCount(): Promise<number>;
    getOfflineUserCount(): Promise<number>;
    resetPassword(token: string, password: string): Promise<User>;
    clearAll(): Promise<void>;
}
